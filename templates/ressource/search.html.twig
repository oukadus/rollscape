{% extends 'base.html.twig' %}

{% block title %}Ressource index{% endblock %}

{% block main %}

<div class="container mb-5">
  <h2 class="mb-4 ff-montserrat fw-bolder fs-3 visually-hidden">Ressources</h2>
  <div class="masonry-gallery mt-5">
    {% for ressource in ressources %}
      <div class="masonry-item">
        <a href="{{ path('app_ressource_show', {'id': ressource.id}) }}" class="text-decoration-none d-block">
          <div class="card rounded border-0 shadow-sm position-relative">
            <img src="{{ asset('images/ressources/' ~ ressource.filename) }}" alt="{{ ressource.title }}" class="img-fluid w-100 rounded ressource-img">
            <div class="hover-overlay rounded d-flex flex-column align-items-center justify-content-center">
              <h3 class="px-3 fs-6 text-white ff-montserrat text-center mb-3">{{ ressource.title }}</h3>
            </div>
          </a>
          <div class="bookmark-overlay p-2">
            <button
              class="btn rounded toggle-bookmark {{ ressource in app.user.bookmarks ? 'btn-dark' : 'btn-outline-light' }}"
              data-ressource-id="{{ ressource.id }}"
              data-bookmarked="{{ ressource in app.user.bookmarks ? 'true' : 'false' }}"
              onclick="event.preventDefault(); event.stopPropagation();">
              <i class="{{ ressource in app.user.bookmarks ? 'bi bi-check-lg' : 'bi bi-bookmark' }}"></i>
            </button>
          </div>
        </div>
      </div>
    {% else %}
      <p>Aucune ressource trouvée.</p>
    {% endfor %}
  </div>
  <div class="pagination mt-4">
    {{ knp_pagination_render(pagination) }}
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
  document.querySelectorAll('.toggle-bookmark').forEach(button => {
    button.addEventListener('click', () => {
      const ressourceId = button.dataset.ressourceId;
      const isBookmarked = button.dataset.bookmarked === 'true';
      const url = isBookmarked
        ? `/bookmark/remove/${ressourceId}`
        : `/bookmark/add/${ressourceId}`;

      // Sauvegarde de l’état avant changement
      const originalClass = button.className;
      const originalIcon = button.innerHTML;
      const originalState = button.dataset.bookmarked;

      // Mise à jour immédiate de l’interface
      if (isBookmarked) {
        button.classList.remove('btn-dark');
        button.classList.add('btn-outline-light');
        button.innerHTML = '<i class="bi bi-bookmark"></i>';
        button.dataset.bookmarked = 'false';
      } else {
        button.classList.remove('btn-outline-light');
        button.classList.add('btn-dark');
        button.innerHTML = '<i class="bi bi-check-lg"></i>';
        button.dataset.bookmarked = 'true';
      }

      // Requête serveur
      fetch(url, {
        method: 'GET',
        headers: {
          'X-Requested-With': 'XMLHttpRequest',
        },
      }).then(response => {
        if (!response.ok) {
          throw new Error('Réponse non OK');
        }
      }).catch(error => {
        console.warn('Erreur AJAX, rollback UI', error);

        // Échec → rollback UI
        button.className = originalClass;
        button.innerHTML = originalIcon;
        button.dataset.bookmarked = originalState;
      });
    });
  });
});
</script>


    

{% endblock %}
